<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Opportunities - HandInHand</title>
    <link rel="icon" type="image/png" href="https://i.imgur.com/MoSHBZX.png">
    <link rel="stylesheet" href="poststyle.css">

</head>

<body>
    <header>
        <a href="/">
            <img src="https://i.imgur.com/MoSHBZX.png" class="logo" alt="HandinHand">
        </a>
        <ul class="navbar">
            <li><a href="/">Home</a></li>
            <li><a href="/about">About</a></li>
            <li><a href="/Posts">Opportunities</a></li>
            <li><a href="{{#if profileLink}}{{ profileLink }}{{else}}/signup{{/if}}">Profile</a></li>
        </ul>
        <div class="h-right">
            {{#if isOrganization }}
            <a href="/job_submission_form">
                <button class="post-button">Post an Opportunity</button>
            </a>
            {{/if}}
            {{#if signedIn}}
            <a href="/logout">Logout</a>
            {{else}}
            <li><a href="/signup">Register</a>|<a href="/login">Login</a></li>
            {{/if}}
            <div class="bx bx-menu" id="menu-icon"></div>
        </div>
    </header>

    <div class="search-bar">
        <input type="text" class="search-input" placeholder="Search..." id="searchInput">
        <button class="search-button">Search</button>
    </div>

    <div class="container">
        <aside class="sidebar">
            <h2>Sort By</h2>
            <div class="sort-options">
                <button id="sortByStartDateClosest">Start Date Closest</button>
                <button id="sortByStartDateFarthest">Start Date Farthest</button>
                <button id="sortByStartTimeIncreasing">Duration Shortest</button>
                <button id="sortByStartTimeDecreasing">Duration Longest</button>
            </div>
            <h2>Filter By</h2>
            <div class="filter-category">
                <h3>Popular Filters</h3>
                <ul>
                    <li><input type="checkbox" id="Full-time"> <label for="Full-time">Full-time</label></li>
                    <li><input type="checkbox" id="Part-time"> <label for="Part-time">Part-time</label></li>
                    <li><input type="checkbox" id="Animal-Shelter"> <label for="Animal-Shelter">Animal Shelter</label></li>
                    <li><input type="checkbox" id="Counseling"> <label for="Counseling">Counseling</label></li>
                    <li><input type="checkbox" id="Healthcare"> <label for="Healthcare">Healthcare</label></li>
                    <li><input type="checkbox" id="Tutoring"> <label for="Tutoring">Tutoring</label></li>
                </ul>
            </div>
        </aside>

        <main class="main-content">
            <section class="opportunities-page" id="opportunitiesPage">

                {{#each jobs}}
                {{#if (eq this.completed false)}}
                <div class="opportunity-card">
                    {{#if this.imageLink}}
                    <div class="opportunity-image">
                        <img src="{{this.imageLink}}" alt="Opportunity Image">
                    </div>
                    {{/if}}
                    <div class="opportunity-details">
                        <div class="creator">
                            <a href="/vieworgprofile?creator={{this.creator}}">
                                <p>{{this.creator}}</p>
                            </a>
                        </div>
                        <h3>{{this.title}}</h3>
                        <p>{{this.description}}</p>
                        <p>{{this.startDate}}</p>


                        {{#if this.openPositions}}
                        <span class="seats-left">Seats Left: {{this.openPositions}}</span>
                        {{#unless ../isOrganization }}
                        <a href="/checkout?jobId={{this._id}}" class="book-button">Book</a>
                        {{/unless}}
                        {{else}}
                        <p class="seats-left">No seats left</p>
                        {{/if}}


                        <div class="more-details" style="display: none;">
                            <p><strong>Location:</strong> {{this.location}}</p>
                            <p><strong>Required Hours:</strong> {{this.requiredHours}}</p>
                            <p><strong>Required Skills:</strong> {{this.requiredSkills}}</p>
                        </div>
                    </div>
                </div>
                {{/if}}
                {{/each}}

            </section>
        </main>
    </div>

    <script>
            const header = document.querySelector("header");
            window.addEventListener("scroll", function () {
                header.classList.toggle("sticky", window.scrollY > 60)
            });

            let menu = document.querySelector('#menu-icon');
            let navbar = document.querySelector('.navbar');

            menu.onclick = () => {
                menu.classList.toggle('bx-x');
                navbar.classList.toggle('open');
            };

            document.addEventListener("DOMContentLoaded", function () {
                const opportunityCards = document.querySelectorAll(".opportunity-card");
                opportunityCards.forEach(card => {
                    card.addEventListener("click", function (event) {
                        if (!event.target.classList.contains("book-button")) {
                            const moreDetails = this.querySelector(".more-details");
                            moreDetails.style.display = moreDetails.style.display === "none" ? "block" : "none";
                        }
                    });
                });
            });


            const searchInput = document.getElementById("searchInput");
            searchInput.addEventListener("input", function () {
                const searchText = searchInput.value.toLowerCase();
                const opportunityCards = document.querySelectorAll(".opportunity-card");
                opportunityCards.forEach(card => {
                    const title = card.querySelector("h3").textContent.toLowerCase();
                    const description = card.querySelector("p").textContent.toLowerCase();
                    const moreDetailsContent = card.querySelector(".more-details").textContent.toLowerCase();
                    if (title.includes(searchText) || description.includes(searchText) || moreDetailsContent.includes(searchText)) {
                        card.style.display = "block";
                    } else {
                        card.style.display = "none";
                    }
                });
            });

        document.addEventListener("DOMContentLoaded", function () {
            const sortByStartDateClosestBtn = document.getElementById("sortByStartDateClosest");
            const sortByStartDateFarthestBtn = document.getElementById("sortByStartDateFarthest");
            const sortByStartTimeIncreasingBtn = document.getElementById("sortByStartTimeIncreasing");
            const sortByStartTimeDecreasingBtn = document.getElementById("sortByStartTimeDecreasing");

            sortByStartDateClosestBtn.addEventListener("click", function () {
                sortOpportunitiesByStartDateClosest();
            });

            sortByStartDateFarthestBtn.addEventListener("click", function () {
                sortOpportunitiesByStartDateFarthest();
            });

            sortByStartTimeIncreasingBtn.addEventListener("click", function () {
                sortOpportunitiesByStartTimeIncreasing();
            });

            sortByStartTimeDecreasingBtn.addEventListener("click", function () {
                sortOpportunitiesByStartTimeDecreasing();
            });
        });

        function sortOpportunitiesByStartDateClosest() {
            const opportunityCardsContainer = document.querySelector(".opportunities-page");
            const opportunityCards = Array.from(opportunityCardsContainer.querySelectorAll(".opportunity-card"));

            opportunityCards.sort((a, b) => {
                const startDateA = new Date(a.querySelector("p").textContent);
                const startDateB = new Date(b.querySelector("p").textContent);
                return startDateA - startDateB;
            });

            opportunityCards.forEach(card => {
                opportunityCardsContainer.appendChild(card);
            });
        }

        function sortOpportunitiesByStartDateFarthest() {
            const opportunityCardsContainer = document.querySelector(".opportunities-page");
            const opportunityCards = Array.from(opportunityCardsContainer.querySelectorAll(".opportunity-card"));

            opportunityCards.sort((a, b) => {
                const startDateA = new Date(a.querySelector("p").textContent);
                const startDateB = new Date(b.querySelector("p").textContent);
                return startDateB - startDateA;
            });

            opportunityCards.forEach(card => {
                opportunityCardsContainer.appendChild(card);
            });
        }

        function sortOpportunitiesByStartTimeIncreasing() {
            const opportunityCardsContainer = document.querySelector(".opportunities-page");
            const opportunityCards = Array.from(opportunityCardsContainer.querySelectorAll(".opportunity-card"));

            opportunityCards.sort((a, b) => {
                const startTimeA = parseInt(a.querySelector("span.seats-left").textContent.split(": ")[1]);
                const startTimeB = parseInt(b.querySelector("span.seats-left").textContent.split(": ")[1]);
                return startTimeA - startTimeB;
            });

            opportunityCards.forEach(card => {
                opportunityCardsContainer.appendChild(card);
            });
        }

        function sortOpportunitiesByStartTimeDecreasing() {
            const opportunityCardsContainer = document.querySelector(".opportunities-page");
            const opportunityCards = Array.from(opportunityCardsContainer.querySelectorAll(".opportunity-card"));

            opportunityCards.sort((a, b) => {
                const startTimeA = parseInt(a.querySelector("span.seats-left").textContent.split(": ")[1]);
                const startTimeB = parseInt(b.querySelector("span.seats-left").textContent.split(": ")[1]);
                return startTimeB - startTimeA;
            });

            opportunityCards.forEach(card => {
                opportunityCardsContainer.appendChild(card);
            });
        }

        document.addEventListener("DOMContentLoaded", function () {
            const filterCheckboxes = document.querySelectorAll('.filter-category input[type="checkbox"]');
            filterCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', applyFilters);
            });
        });

        function applyFilters() {
            const selectedFilters = getSelectedFilters();
            const opportunityCards = document.querySelectorAll(".opportunity-card");

            opportunityCards.forEach(card => {
                const filtersMatched = selectedFilters.every(filter => {
                    return cardMatchesFilter(card, filter);
                });

                if (filtersMatched) {
                    card.style.display = "block";
                } else {
                    card.style.display = "none";
                }
            });
        }

        function getSelectedFilters() {
            const filterCheckboxes = document.querySelectorAll('.filter-category input[type="checkbox"]:checked');
            const selectedFilters = Array.from(filterCheckboxes).map(checkbox => checkbox.id);
            return selectedFilters;
        }

        function cardMatchesFilter(card, filter) {
            // Check if any part of the card content matches the filter
            const title = card.querySelector("h3").textContent.toLowerCase();
            const description = card.querySelector("p").textContent.toLowerCase();
            const moreDetailsContent = card.querySelector(".more-details").textContent.toLowerCase();

            return title.includes(filter) || description.includes(filter) || moreDetailsContent.includes(filter);
        }

    </script>
</body>
</html>