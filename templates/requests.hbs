<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale = 1.0">
    <title>HandinHand Admin</title>
    <link rel="stylesheet" href="orgstyle.css">
    <link rel="shortcut icon" type="x-icon" href="logonowords.png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
</head>

<body>
    <div class="sidebar">
        <div class="sidebar-brand">
            <img src="https://i.imgur.com/x42wRvf.png" class="logo" alt="HandinHand">
        </div>
        <div class="sidebar-menu">
            <ul>
                <li>
                    <a href="/admin"><span class="fa-solid fa-gauge"></span>
                        <span>Dashboard</span></a>
                </li>
                <li>
                    <a href="/volunteeradmin"><span class="fa-solid fa-user"></span>
                        <span>Volunteers</span></a>
                </li>
                <li>
                    <a href="/org_admin"><span class="fa-solid fa-building-ngo"></span>
                        <span>Organizations</span></a>
                </li>
                <li>
                    <a href="/opp_admin"><span class="fa-solid fa-calendar-days"></span>
                        <span>Opportunities</span></a>
                </li>
                <li>
                    <a href="/requests" class="active"><span class="fa-solid fa-bell"></span>
                        <span>Requests</span></a>
                </li>
                <li>
                    <a href="/"><span class="fa-solid fa-house"></span>
                        <span>Homepage</span></a>
                </li>
            </ul>
        </div>
    </div>
    <div class="main-content">
        <header>
            <div class="user-wrapper">
                <img src="https://static-00.iconduck.com/assets.00/profile-circle-icon-512x512-zxne30hp.png"
                    width="40px" height="40px" alt="">
                <div>
                    <h4>{{adName}}</h4>
                    <small>Administrator</small>
                </div>
            </div>
        </header>
        <main>
            <div class="grid">
                <div class="organizations">
                    <div class="card">
                        <div class="card-header">
                            <h2>All Organizations</h2>
                            <div class="search-wrapper">
                                <span class="fa-solid fa-magnifying-glass"></span>
                                <input id="searchInput" type="search" placeholder="Search here" />
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table id="organizationsTable" width="100%">
                                    <thead>
                                        <tr>
                                            <th onclick="sortTable(0)">Organization Name</th>
                                            <th>Email Address</th>
                                            <th>Phone Number</th>
                                            <th>Location</th>
                                            <th onclick="sortTable(4)">Date Requested</th>
                                            {{!-- <th>Request</th> --}}
                                            <th>Review</th>
                                            <th>Delete</th>
                                        </tr>
                                    </thead>
                                    {{#each reqOrgs}}
                                    <tbody>
                                        <tr>
                                            <td>{{this.name}}</td>
                                            <td>{{this.email}}</td>
                                            <td>{{this.PhoneNum}}</td>
                                            <td>{{this.Location}}</td>
                                            <td>{{this.DateReq}}</td>
                                            {{!-- <td><button class="request-button"
                                                    onclick="handleButtonClick()">Request</button></td> --}}
                                            <td><button class="review-button"
                                                    onclick="acceptRequest('{{this._id}}')">Accept</button></td>
                                            <td>
                                                <button id="deleteButton-{{this._id}}" class="delete-button"
                                                    data-user-id="{{this._id}}"
                                                    onclick="denyRequest('{{this._id}}')">Deny</button>
                                            </td>


                                        </tr>
                                    </tbody>
                                    {{/each}}
                                </table>
                                <div class="pagination">
                                    <button id="prevPageBtn" onclick="prevPage()">Previous</button>
                                    <span id="currentPage"></span>
                                    <button id="nextPageBtn" onclick="nextPage()">Next</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var reviewButtons = document.querySelectorAll('.review-button');
            reviewButtons.forEach(function (reviewButton) {
                reviewButton.addEventListener('click', async function () {
                    // Debugging: Ensure event listener is triggered
                    console.log("Review button clicked");
                    // Change button text to 'Reviewed'
                    this.textContent = 'Reviewed';
                    // Change button background color to green
                    this.style.backgroundColor = '#28a745';
                    // Change cursor to default
                    this.style.cursor = 'default';
                    // Disable the button after it's reviewed
                    this.disabled = true;

                    // Hide the parent row of the button
                    var row = this.closest('tr');
                    if (row) {
                        row.style.display = 'none'; // Hide the row
                    }
                });
            });
        });

        async function acceptRequest(requestId) {
            try {
                const response = await fetch('/adminacceptrequest', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ userId: requestId }) // Send the request ID in the request body
                });
                const data = await response.text(); // Assuming the response is a text message
                alert(data); // Display the response message
            } catch (error) {
                console.error('Error accepting request:', error);
                alert('An error occurred while accepting the request'); // Show an alert for errors
            }
        }

        function denyRequest(objectId) {
            fetch('/admindenyrequest', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ objectId })
            })
                .then(response => {
                    if (response.ok) {
                        // Optionally, update the UI to reflect the denial (e.g., remove the denied item from the table)
                        document.getElementById(`deleteButton-${objectId}`).closest('tr').remove();
                        // You can add more UI updates as needed
                    } else {
                        console.error('Deny operation failed');
                        // Handle error or display a message
                    }
                })
                .catch(error => {
                    console.error('Error denying request:', error);
                    // Handle error or display a message
                });
        }




        document.getElementById("searchInput").addEventListener("keyup", function () {
            var input, filter, table, tr, td, i, j, txtValue;
            input = document.getElementById("searchInput");
            filter = input.value.toUpperCase();
            table = document.getElementById("organizationsTable");
            tr = table.getElementsByTagName("tr");
            for (i = 1; i < tr.length; i++) {
                // Initialize flag to false
                var rowVisible = false;
                // Loop through all cells in current row
                for (j = 0; j < tr[i].cells.length; j++) {
                    td = tr[i].cells[j];
                    if (td) {
                        txtValue = td.textContent || td.innerText;
                        // If any cell matches the filter, set rowVisible to true and break loop
                        if (txtValue.toUpperCase().indexOf(filter) > -1) {
                            rowVisible = true;
                            break;
                        }
                    }
                }
                // Show/hide row based on rowVisible flag
                if (rowVisible) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        });
        function parseDate(dateString) {
            const months = {
                "Jan.": 0, "Feb.": 1, "Mar.": 2, "Apr.": 3, "May": 4, "Jun.": 5,
                "Jul.": 6, "Aug.": 7, "Sep.": 8, "Oct.": 9, "Nov.": 10, "Dec.": 11
            };
            const [month, day, year] = dateString.split(" ");
            return new Date(year, months[month], parseInt(day.slice(0, -1))); // Slicing "Day" to remove the comma
        }
        function sortTable(columnIndex) {
            const table = document.getElementById("organizationsTable");
            const tbody = table.getElementsByTagName("tbody")[0];
            const rows = Array.from(tbody.getElementsByTagName("tr"));
            let ascending = true; // Flag to indicate sorting direction
            // Toggle sorting direction
            if (table.dataset.sortColumnIndex === columnIndex.toString()) {
                ascending = !table.dataset.sortAscending;
            }
            // Store sorting state in table attributes
            table.dataset.sortColumnIndex = columnIndex;
            table.dataset.sortAscending = ascending;
            const sortedRows = rows.sort((a, b) => {
                let aValue = a.getElementsByTagName("td")[columnIndex].innerText.trim();
                let bValue = b.getElementsByTagName("td")[columnIndex].innerText.trim();
                // For date column (index 4), parse the dates manually before comparison
                if (columnIndex === 4) {
                    aValue = parseDate(aValue);
                    bValue = parseDate(bValue);
                    // Reverse the comparison if sorting in descending order
                    return ascending ? aValue - bValue : bValue - aValue;
                }
                // Compare values based on sorting direction
                const comparison = aValue.localeCompare(bValue);
                return ascending ? comparison : -comparison;
            });
            while (tbody.firstChild) {
                tbody.removeChild(tbody.firstChild);
            }
            sortedRows.forEach(row => {
                tbody.appendChild(row);
            });
        }
        const pageSize = 10; // Number of entries per page
        let currentPage = 1; // Current page being displayed
        function displayPage(pageNumber) {
            const table = document.getElementById("organizationsTable");
            const tbody = table.getElementsByTagName("tbody")[0];
            const rows = Array.from(tbody.getElementsByTagName("tr"));
            // Calculate the start and end indices for the current page
            const startIndex = (pageNumber - 1) * pageSize;
            const endIndex = pageNumber * pageSize;
            // Hide all rows
            rows.forEach(row => {
                row.style.display = "none";
            });
            // Show rows for the current page
            for (let i = startIndex; i < Math.min(endIndex, rows.length); i++) {
                rows[i].style.display = "";
            }
        }
        function goToPage(pageNumber) {
            if (pageNumber < 1 || pageNumber > getTotalPages()) {
                return; // Page number out of range
            }
            currentPage = pageNumber;
            displayPage(currentPage);
        }
        function getTotalPages() {
            const table = document.getElementById("organizationsTable");
            const tbody = table.getElementsByTagName("tbody")[0];
            const rowCount = tbody.getElementsByTagName("tr").length;
            return Math.ceil(rowCount / pageSize);
        }
        function nextPage() {
            goToPage(currentPage + 1);
        }
        function prevPage() {
            goToPage(currentPage - 1);
        }
        // Initial display
        displayPage(currentPage);
    </script>
</body>

</html>